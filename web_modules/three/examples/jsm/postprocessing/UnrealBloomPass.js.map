{"version":3,"file":"UnrealBloomPass.js","sources":["../../../../../node_modules/three/examples/jsm/shaders/LuminosityHighPassShader.js","../../../../../node_modules/three/examples/jsm/postprocessing/UnrealBloomPass.js"],"sourcesContent":["/**\n * @author bhouston / http://clara.io/\n *\n * Luminosity\n * http://en.wikipedia.org/wiki/Luminosity\n */\n\nimport {\n\tColor\n} from \"../../../build/three.module.js\";\n\nvar LuminosityHighPassShader = {\n\n\tshaderID: \"luminosityHighPass\",\n\n\tuniforms: {\n\n\t\t\"tDiffuse\": { value: null },\n\t\t\"luminosityThreshold\": { value: 1.0 },\n\t\t\"smoothWidth\": { value: 1.0 },\n\t\t\"defaultColor\": { value: new Color( 0x000000 ) },\n\t\t\"defaultOpacity\": { value: 0.0 }\n\n\t},\n\n\tvertexShader: [\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tvUv = uv;\",\n\n\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" ),\n\n\tfragmentShader: [\n\n\t\t\"uniform sampler2D tDiffuse;\",\n\t\t\"uniform vec3 defaultColor;\",\n\t\t\"uniform float defaultOpacity;\",\n\t\t\"uniform float luminosityThreshold;\",\n\t\t\"uniform float smoothWidth;\",\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tvec4 texel = texture2D( tDiffuse, vUv );\",\n\n\t\t\"\tvec3 luma = vec3( 0.299, 0.587, 0.114 );\",\n\n\t\t\"\tfloat v = dot( texel.xyz, luma );\",\n\n\t\t\"\tvec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );\",\n\n\t\t\"\tfloat alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );\",\n\n\t\t\"\tgl_FragColor = mix( outputColor, texel, alpha );\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" )\n\n};\n\nexport { LuminosityHighPassShader };\n","/**\n * @author spidersharma / http://eduperiment.com/\n */\n\nimport {\n\tAdditiveBlending,\n\tColor,\n\tLinearFilter,\n\tMeshBasicMaterial,\n\tRGBAFormat,\n\tShaderMaterial,\n\tUniformsUtils,\n\tVector2,\n\tVector3,\n\tWebGLRenderTarget\n} from \"../../../build/three.module.js\";\nimport { Pass } from \"../postprocessing/Pass.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { LuminosityHighPassShader } from \"../shaders/LuminosityHighPassShader.js\";\n\n/**\n * UnrealBloomPass is inspired by the bloom pass of Unreal Engine. It creates a\n * mip map chain of bloom textures and blurs them with different radii. Because\n * of the weighted combination of mips, and because larger blurs are done on\n * higher mips, this effect provides good quality and performance.\n *\n * Reference:\n * - https://docs.unrealengine.com/latest/INT/Engine/Rendering/PostProcessEffects/Bloom/\n */\nvar UnrealBloomPass = function ( resolution, strength, radius, threshold ) {\n\n\tPass.call( this );\n\n\tthis.strength = ( strength !== undefined ) ? strength : 1;\n\tthis.radius = radius;\n\tthis.threshold = threshold;\n\tthis.resolution = ( resolution !== undefined ) ? new Vector2( resolution.x, resolution.y ) : new Vector2( 256, 256 );\n\n\t// create color only once here, reuse it later inside the render function\n\tthis.clearColor = new Color( 0, 0, 0 );\n\n\t// render targets\n\tvar pars = { minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat };\n\tthis.renderTargetsHorizontal = [];\n\tthis.renderTargetsVertical = [];\n\tthis.nMips = 5;\n\tvar resx = Math.round( this.resolution.x / 2 );\n\tvar resy = Math.round( this.resolution.y / 2 );\n\n\tthis.renderTargetBright = new WebGLRenderTarget( resx, resy, pars );\n\tthis.renderTargetBright.texture.name = \"UnrealBloomPass.bright\";\n\tthis.renderTargetBright.texture.generateMipmaps = false;\n\n\tfor ( var i = 0; i < this.nMips; i ++ ) {\n\n\t\tvar renderTargetHorizonal = new WebGLRenderTarget( resx, resy, pars );\n\n\t\trenderTargetHorizonal.texture.name = \"UnrealBloomPass.h\" + i;\n\t\trenderTargetHorizonal.texture.generateMipmaps = false;\n\n\t\tthis.renderTargetsHorizontal.push( renderTargetHorizonal );\n\n\t\tvar renderTargetVertical = new WebGLRenderTarget( resx, resy, pars );\n\n\t\trenderTargetVertical.texture.name = \"UnrealBloomPass.v\" + i;\n\t\trenderTargetVertical.texture.generateMipmaps = false;\n\n\t\tthis.renderTargetsVertical.push( renderTargetVertical );\n\n\t\tresx = Math.round( resx / 2 );\n\n\t\tresy = Math.round( resy / 2 );\n\n\t}\n\n\t// luminosity high pass material\n\n\tif ( LuminosityHighPassShader === undefined )\n\t\tconsole.error( \"UnrealBloomPass relies on LuminosityHighPassShader\" );\n\n\tvar highPassShader = LuminosityHighPassShader;\n\tthis.highPassUniforms = UniformsUtils.clone( highPassShader.uniforms );\n\n\tthis.highPassUniforms[ \"luminosityThreshold\" ].value = threshold;\n\tthis.highPassUniforms[ \"smoothWidth\" ].value = 0.01;\n\n\tthis.materialHighPassFilter = new ShaderMaterial( {\n\t\tuniforms: this.highPassUniforms,\n\t\tvertexShader: highPassShader.vertexShader,\n\t\tfragmentShader: highPassShader.fragmentShader,\n\t\tdefines: {}\n\t} );\n\n\t// Gaussian Blur Materials\n\tthis.separableBlurMaterials = [];\n\tvar kernelSizeArray = [ 3, 5, 7, 9, 11 ];\n\tvar resx = Math.round( this.resolution.x / 2 );\n\tvar resy = Math.round( this.resolution.y / 2 );\n\n\tfor ( var i = 0; i < this.nMips; i ++ ) {\n\n\t\tthis.separableBlurMaterials.push( this.getSeperableBlurMaterial( kernelSizeArray[ i ] ) );\n\n\t\tthis.separableBlurMaterials[ i ].uniforms[ \"texSize\" ].value = new Vector2( resx, resy );\n\n\t\tresx = Math.round( resx / 2 );\n\n\t\tresy = Math.round( resy / 2 );\n\n\t}\n\n\t// Composite material\n\tthis.compositeMaterial = this.getCompositeMaterial( this.nMips );\n\tthis.compositeMaterial.uniforms[ \"blurTexture1\" ].value = this.renderTargetsVertical[ 0 ].texture;\n\tthis.compositeMaterial.uniforms[ \"blurTexture2\" ].value = this.renderTargetsVertical[ 1 ].texture;\n\tthis.compositeMaterial.uniforms[ \"blurTexture3\" ].value = this.renderTargetsVertical[ 2 ].texture;\n\tthis.compositeMaterial.uniforms[ \"blurTexture4\" ].value = this.renderTargetsVertical[ 3 ].texture;\n\tthis.compositeMaterial.uniforms[ \"blurTexture5\" ].value = this.renderTargetsVertical[ 4 ].texture;\n\tthis.compositeMaterial.uniforms[ \"bloomStrength\" ].value = strength;\n\tthis.compositeMaterial.uniforms[ \"bloomRadius\" ].value = 0.1;\n\tthis.compositeMaterial.needsUpdate = true;\n\n\tvar bloomFactors = [ 1.0, 0.8, 0.6, 0.4, 0.2 ];\n\tthis.compositeMaterial.uniforms[ \"bloomFactors\" ].value = bloomFactors;\n\tthis.bloomTintColors = [ new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ),\n\t\t\t\t\t\t\t new Vector3( 1, 1, 1 ), new Vector3( 1, 1, 1 ) ];\n\tthis.compositeMaterial.uniforms[ \"bloomTintColors\" ].value = this.bloomTintColors;\n\n\t// copy material\n\tif ( CopyShader === undefined ) {\n\n\t\tconsole.error( \"UnrealBloomPass relies on CopyShader\" );\n\n\t}\n\n\tvar copyShader = CopyShader;\n\n\tthis.copyUniforms = UniformsUtils.clone( copyShader.uniforms );\n\tthis.copyUniforms[ \"opacity\" ].value = 1.0;\n\n\tthis.materialCopy = new ShaderMaterial( {\n\t\tuniforms: this.copyUniforms,\n\t\tvertexShader: copyShader.vertexShader,\n\t\tfragmentShader: copyShader.fragmentShader,\n\t\tblending: AdditiveBlending,\n\t\tdepthTest: false,\n\t\tdepthWrite: false,\n\t\ttransparent: true\n\t} );\n\n\tthis.enabled = true;\n\tthis.needsSwap = false;\n\n\tthis.oldClearColor = new Color();\n\tthis.oldClearAlpha = 1;\n\n\tthis.basic = new MeshBasicMaterial();\n\n\tthis.fsQuad = new Pass.FullScreenQuad( null );\n\n};\n\nUnrealBloomPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: UnrealBloomPass,\n\n\tdispose: function () {\n\n\t\tfor ( var i = 0; i < this.renderTargetsHorizontal.length; i ++ ) {\n\n\t\t\tthis.renderTargetsHorizontal[ i ].dispose();\n\n\t\t}\n\n\t\tfor ( var i = 0; i < this.renderTargetsVertical.length; i ++ ) {\n\n\t\t\tthis.renderTargetsVertical[ i ].dispose();\n\n\t\t}\n\n\t\tthis.renderTargetBright.dispose();\n\n\t},\n\n\tsetSize: function ( width, height ) {\n\n\t\tvar resx = Math.round( width / 2 );\n\t\tvar resy = Math.round( height / 2 );\n\n\t\tthis.renderTargetBright.setSize( resx, resy );\n\n\t\tfor ( var i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tthis.renderTargetsHorizontal[ i ].setSize( resx, resy );\n\t\t\tthis.renderTargetsVertical[ i ].setSize( resx, resy );\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ \"texSize\" ].value = new Vector2( resx, resy );\n\n\t\t\tresx = Math.round( resx / 2 );\n\t\t\tresy = Math.round( resy / 2 );\n\n\t\t}\n\n\t},\n\n\trender: function ( renderer, writeBuffer, readBuffer, deltaTime, maskActive ) {\n\n\t\tthis.oldClearColor.copy( renderer.getClearColor() );\n\t\tthis.oldClearAlpha = renderer.getClearAlpha();\n\t\tvar oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\trenderer.setClearColor( this.clearColor, 0 );\n\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( false );\n\n\t\t// Render input to screen\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\tthis.fsQuad.material = this.basic;\n\t\t\tthis.basic.map = readBuffer.texture;\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t\t// 1. Extract Bright Areas\n\n\t\tthis.highPassUniforms[ \"tDiffuse\" ].value = readBuffer.texture;\n\t\tthis.highPassUniforms[ \"luminosityThreshold\" ].value = this.threshold;\n\t\tthis.fsQuad.material = this.materialHighPassFilter;\n\n\t\trenderer.setRenderTarget( this.renderTargetBright );\n\t\trenderer.clear();\n\t\tthis.fsQuad.render( renderer );\n\n\t\t// 2. Blur All the mips progressively\n\n\t\tvar inputRenderTarget = this.renderTargetBright;\n\n\t\tfor ( var i = 0; i < this.nMips; i ++ ) {\n\n\t\t\tthis.fsQuad.material = this.separableBlurMaterials[ i ];\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ \"colorTexture\" ].value = inputRenderTarget.texture;\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ \"direction\" ].value = UnrealBloomPass.BlurDirectionX;\n\t\t\trenderer.setRenderTarget( this.renderTargetsHorizontal[ i ] );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ \"colorTexture\" ].value = this.renderTargetsHorizontal[ i ].texture;\n\t\t\tthis.separableBlurMaterials[ i ].uniforms[ \"direction\" ].value = UnrealBloomPass.BlurDirectionY;\n\t\t\trenderer.setRenderTarget( this.renderTargetsVertical[ i ] );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\tinputRenderTarget = this.renderTargetsVertical[ i ];\n\n\t\t}\n\n\t\t// Composite All the mips\n\n\t\tthis.fsQuad.material = this.compositeMaterial;\n\t\tthis.compositeMaterial.uniforms[ \"bloomStrength\" ].value = this.strength;\n\t\tthis.compositeMaterial.uniforms[ \"bloomRadius\" ].value = this.radius;\n\t\tthis.compositeMaterial.uniforms[ \"bloomTintColors\" ].value = this.bloomTintColors;\n\n\t\trenderer.setRenderTarget( this.renderTargetsHorizontal[ 0 ] );\n\t\trenderer.clear();\n\t\tthis.fsQuad.render( renderer );\n\n\t\t// Blend it additively over the input texture\n\n\t\tthis.fsQuad.material = this.materialCopy;\n\t\tthis.copyUniforms[ \"tDiffuse\" ].value = this.renderTargetsHorizontal[ 0 ].texture;\n\n\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( true );\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( readBuffer );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t\t// Restore renderer settings\n\n\t\trenderer.setClearColor( this.oldClearColor, this.oldClearAlpha );\n\t\trenderer.autoClear = oldAutoClear;\n\n\t},\n\n\tgetSeperableBlurMaterial: function ( kernelRadius ) {\n\n\t\treturn new ShaderMaterial( {\n\n\t\t\tdefines: {\n\t\t\t\t\"KERNEL_RADIUS\": kernelRadius,\n\t\t\t\t\"SIGMA\": kernelRadius\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\t\"colorTexture\": { value: null },\n\t\t\t\t\"texSize\": { value: new Vector2( 0.5, 0.5 ) },\n\t\t\t\t\"direction\": { value: new Vector2( 0.5, 0.5 ) }\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t\"varying vec2 vUv;\\n\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvUv = uv;\\n\\\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\n\t\t\t\t}\",\n\n\t\t\tfragmentShader:\n\t\t\t\t\"#include <common>\\\n\t\t\t\tvarying vec2 vUv;\\n\\\n\t\t\t\tuniform sampler2D colorTexture;\\n\\\n\t\t\t\tuniform vec2 texSize;\\\n\t\t\t\tuniform vec2 direction;\\\n\t\t\t\t\\\n\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\\\n\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\\\n\t\t\t\t}\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\\\n\t\t\t\t\tfloat fSigma = float(SIGMA);\\\n\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, fSigma);\\\n\t\t\t\t\tvec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\\\n\t\t\t\t\tfor( int i = 1; i < KERNEL_RADIUS; i ++ ) {\\\n\t\t\t\t\t\tfloat x = float(i);\\\n\t\t\t\t\t\tfloat w = gaussianPdf(x, fSigma);\\\n\t\t\t\t\t\tvec2 uvOffset = direction * invSize * x;\\\n\t\t\t\t\t\tvec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;\\\n\t\t\t\t\t\tvec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;\\\n\t\t\t\t\t\tdiffuseSum += (sample1 + sample2) * w;\\\n\t\t\t\t\t\tweightSum += 2.0 * w;\\\n\t\t\t\t\t}\\\n\t\t\t\t\tgl_FragColor = vec4(diffuseSum/weightSum, 1.0);\\n\\\n\t\t\t\t}\"\n\t\t} );\n\n\t},\n\n\tgetCompositeMaterial: function ( nMips ) {\n\n\t\treturn new ShaderMaterial( {\n\n\t\t\tdefines: {\n\t\t\t\t\"NUM_MIPS\": nMips\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\t\"blurTexture1\": { value: null },\n\t\t\t\t\"blurTexture2\": { value: null },\n\t\t\t\t\"blurTexture3\": { value: null },\n\t\t\t\t\"blurTexture4\": { value: null },\n\t\t\t\t\"blurTexture5\": { value: null },\n\t\t\t\t\"dirtTexture\": { value: null },\n\t\t\t\t\"bloomStrength\": { value: 1.0 },\n\t\t\t\t\"bloomFactors\": { value: null },\n\t\t\t\t\"bloomTintColors\": { value: null },\n\t\t\t\t\"bloomRadius\": { value: 0.0 }\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t\"varying vec2 vUv;\\n\\\n\t\t\t\tvoid main() {\\n\\\n\t\t\t\t\tvUv = uv;\\n\\\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\\n\t\t\t\t}\",\n\n\t\t\tfragmentShader:\n\t\t\t\t\"varying vec2 vUv;\\\n\t\t\t\tuniform sampler2D blurTexture1;\\\n\t\t\t\tuniform sampler2D blurTexture2;\\\n\t\t\t\tuniform sampler2D blurTexture3;\\\n\t\t\t\tuniform sampler2D blurTexture4;\\\n\t\t\t\tuniform sampler2D blurTexture5;\\\n\t\t\t\tuniform sampler2D dirtTexture;\\\n\t\t\t\tuniform float bloomStrength;\\\n\t\t\t\tuniform float bloomRadius;\\\n\t\t\t\tuniform float bloomFactors[NUM_MIPS];\\\n\t\t\t\tuniform vec3 bloomTintColors[NUM_MIPS];\\\n\t\t\t\t\\\n\t\t\t\tfloat lerpBloomFactor(const in float factor) { \\\n\t\t\t\t\tfloat mirrorFactor = 1.2 - factor;\\\n\t\t\t\t\treturn mix(factor, mirrorFactor, bloomRadius);\\\n\t\t\t\t}\\\n\t\t\t\t\\\n\t\t\t\tvoid main() {\\\n\t\t\t\t\tgl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) + \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) + \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) + \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) + \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\\\n\t\t\t\t}\"\n\t\t} );\n\n\t}\n\n} );\n\nUnrealBloomPass.BlurDirectionX = new Vector2( 1.0, 0.0 );\nUnrealBloomPass.BlurDirectionY = new Vector2( 0.0, 1.0 );\n\nexport { UnrealBloomPass };\n"],"names":["LuminosityHighPassShader","shaderID","uniforms","tDiffuse","value","luminosityThreshold","smoothWidth","defaultColor","Color","defaultOpacity","vertexShader","join","fragmentShader","UnrealBloomPass","resolution","strength","radius","threshold","Pass","call","this","undefined","Vector2","x","y","clearColor","pars","minFilter","LinearFilter","magFilter","format","RGBAFormat","renderTargetsHorizontal","renderTargetsVertical","nMips","resx","Math","round","resy","renderTargetBright","WebGLRenderTarget","texture","name","generateMipmaps","i","renderTargetHorizonal","push","renderTargetVertical","console","error","highPassShader","highPassUniforms","UniformsUtils","clone","materialHighPassFilter","ShaderMaterial","defines","separableBlurMaterials","kernelSizeArray","getSeperableBlurMaterial","compositeMaterial","getCompositeMaterial","needsUpdate","bloomTintColors","Vector3","CopyShader","copyShader","copyUniforms","materialCopy","blending","AdditiveBlending","depthTest","depthWrite","transparent","enabled","needsSwap","oldClearColor","oldClearAlpha","basic","MeshBasicMaterial","fsQuad","FullScreenQuad","prototype","Object","assign","create","constructor","dispose","length","setSize","width","height","render","renderer","writeBuffer","readBuffer","deltaTime","maskActive","copy","getClearColor","getClearAlpha","oldAutoClear","autoClear","setClearColor","state","buffers","stencil","setTest","renderToScreen","material","map","setRenderTarget","clear","inputRenderTarget","BlurDirectionX","BlurDirectionY","kernelRadius","KERNEL_RADIUS","SIGMA","colorTexture","texSize","direction","NUM_MIPS","blurTexture1","blurTexture2","blurTexture3","blurTexture4","blurTexture5","dirtTexture","bloomStrength","bloomFactors","bloomRadius"],"mappings":"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"}