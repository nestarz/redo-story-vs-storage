{"version":3,"file":"EffectComposer.js","sources":["../../../../../node_modules/three/examples/jsm/postprocessing/ShaderPass.js","../../../../../node_modules/three/examples/jsm/postprocessing/MaskPass.js","../../../../../node_modules/three/examples/jsm/postprocessing/EffectComposer.js"],"sourcesContent":["/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nimport {\n\tShaderMaterial,\n\tUniformsUtils\n} from \"../../../build/three.module.js\";\nimport { Pass } from \"../postprocessing/Pass.js\";\n\nvar ShaderPass = function ( shader, textureID ) {\n\n\tPass.call( this );\n\n\tthis.textureID = ( textureID !== undefined ) ? textureID : \"tDiffuse\";\n\n\tif ( shader instanceof ShaderMaterial ) {\n\n\t\tthis.uniforms = shader.uniforms;\n\n\t\tthis.material = shader;\n\n\t} else if ( shader ) {\n\n\t\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\tthis.material = new ShaderMaterial( {\n\n\t\t\tdefines: Object.assign( {}, shader.defines ),\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t} );\n\n\t}\n\n\tthis.fsQuad = new Pass.FullScreenQuad( this.material );\n\n};\n\nShaderPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: ShaderPass,\n\n\trender: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tif ( this.uniforms[ this.textureID ] ) {\n\n\t\t\tthis.uniforms[ this.textureID ].value = readBuffer.texture;\n\n\t\t}\n\n\t\tthis.fsQuad.material = this.material;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n} );\n\nexport { ShaderPass };\n","/**\n * @author alteredq / http://alteredqualia.com/\n */\n\n\nimport { Pass } from \"../postprocessing/Pass.js\";\n\nvar MaskPass = function ( scene, camera ) {\n\n\tPass.call( this );\n\n\tthis.scene = scene;\n\tthis.camera = camera;\n\n\tthis.clear = true;\n\tthis.needsSwap = false;\n\n\tthis.inverse = false;\n\n};\n\nMaskPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: MaskPass,\n\n\trender: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tvar context = renderer.getContext();\n\t\tvar state = renderer.state;\n\n\t\t// don't update color or depth\n\n\t\tstate.buffers.color.setMask( false );\n\t\tstate.buffers.depth.setMask( false );\n\n\t\t// lock buffers\n\n\t\tstate.buffers.color.setLocked( true );\n\t\tstate.buffers.depth.setLocked( true );\n\n\t\t// set up stencil\n\n\t\tvar writeValue, clearValue;\n\n\t\tif ( this.inverse ) {\n\n\t\t\twriteValue = 0;\n\t\t\tclearValue = 1;\n\n\t\t} else {\n\n\t\t\twriteValue = 1;\n\t\t\tclearValue = 0;\n\n\t\t}\n\n\t\tstate.buffers.stencil.setTest( true );\n\t\tstate.buffers.stencil.setOp( context.REPLACE, context.REPLACE, context.REPLACE );\n\t\tstate.buffers.stencil.setFunc( context.ALWAYS, writeValue, 0xffffffff );\n\t\tstate.buffers.stencil.setClear( clearValue );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t\t// draw into the stencil buffer\n\n\t\trenderer.setRenderTarget( readBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\trenderer.setRenderTarget( writeBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\t// unlock color and depth buffer for subsequent rendering\n\n\t\tstate.buffers.color.setLocked( false );\n\t\tstate.buffers.depth.setLocked( false );\n\n\t\t// only render where stencil is set to 1\n\n\t\tstate.buffers.stencil.setLocked( false );\n\t\tstate.buffers.stencil.setFunc( context.EQUAL, 1, 0xffffffff ); // draw if == 1\n\t\tstate.buffers.stencil.setOp( context.KEEP, context.KEEP, context.KEEP );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t}\n\n} );\n\n\nvar ClearMaskPass = function () {\n\n\tPass.call( this );\n\n\tthis.needsSwap = false;\n\n};\n\nClearMaskPass.prototype = Object.create( Pass.prototype );\n\nObject.assign( ClearMaskPass.prototype, {\n\n\trender: function ( renderer /*, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\trenderer.state.buffers.stencil.setLocked( false );\n\t\trenderer.state.buffers.stencil.setTest( false );\n\n\t}\n\n} );\n\nexport { MaskPass, ClearMaskPass };\n","/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nimport {\n\tClock,\n\tLinearFilter,\n\tMesh,\n\tOrthographicCamera,\n\tPlaneBufferGeometry,\n\tRGBAFormat,\n\tVector2,\n\tWebGLRenderTarget\n} from \"../../../build/three.module.js\";\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { ShaderPass } from \"../postprocessing/ShaderPass.js\";\nimport { MaskPass } from \"../postprocessing/MaskPass.js\";\nimport { ClearMaskPass } from \"../postprocessing/MaskPass.js\";\n\nvar EffectComposer = function ( renderer, renderTarget ) {\n\n\tthis.renderer = renderer;\n\n\tif ( renderTarget === undefined ) {\n\n\t\tvar parameters = {\n\t\t\tminFilter: LinearFilter,\n\t\t\tmagFilter: LinearFilter,\n\t\t\tformat: RGBAFormat,\n\t\t\tstencilBuffer: false\n\t\t};\n\n\t\tvar size = renderer.getSize( new Vector2() );\n\t\tthis._pixelRatio = renderer.getPixelRatio();\n\t\tthis._width = size.width;\n\t\tthis._height = size.height;\n\n\t\trenderTarget = new WebGLRenderTarget( this._width * this._pixelRatio, this._height * this._pixelRatio, parameters );\n\t\trenderTarget.texture.name = 'EffectComposer.rt1';\n\n\t} else {\n\n\t\tthis._pixelRatio = 1;\n\t\tthis._width = renderTarget.width;\n\t\tthis._height = renderTarget.height;\n\n\t}\n\n\tthis.renderTarget1 = renderTarget;\n\tthis.renderTarget2 = renderTarget.clone();\n\tthis.renderTarget2.texture.name = 'EffectComposer.rt2';\n\n\tthis.writeBuffer = this.renderTarget1;\n\tthis.readBuffer = this.renderTarget2;\n\n\tthis.renderToScreen = true;\n\n\tthis.passes = [];\n\n\t// dependencies\n\n\tif ( CopyShader === undefined ) {\n\n\t\tconsole.error( 'THREE.EffectComposer relies on CopyShader' );\n\n\t}\n\n\tif ( ShaderPass === undefined ) {\n\n\t\tconsole.error( 'THREE.EffectComposer relies on ShaderPass' );\n\n\t}\n\n\tthis.copyPass = new ShaderPass( CopyShader );\n\n\tthis.clock = new Clock();\n\n};\n\nObject.assign( EffectComposer.prototype, {\n\n\tswapBuffers: function () {\n\n\t\tvar tmp = this.readBuffer;\n\t\tthis.readBuffer = this.writeBuffer;\n\t\tthis.writeBuffer = tmp;\n\n\t},\n\n\taddPass: function ( pass ) {\n\n\t\tthis.passes.push( pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t},\n\n\tinsertPass: function ( pass, index ) {\n\n\t\tthis.passes.splice( index, 0, pass );\n\n\t},\n\n\tisLastEnabledPass: function ( passIndex ) {\n\n\t\tfor ( var i = passIndex + 1; i < this.passes.length; i ++ ) {\n\n\t\t\tif ( this.passes[ i ].enabled ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\trender: function ( deltaTime ) {\n\n\t\t// deltaTime value is in seconds\n\n\t\tif ( deltaTime === undefined ) {\n\n\t\t\tdeltaTime = this.clock.getDelta();\n\n\t\t}\n\n\t\tvar currentRenderTarget = this.renderer.getRenderTarget();\n\n\t\tvar maskActive = false;\n\n\t\tvar pass, i, il = this.passes.length;\n\n\t\tfor ( i = 0; i < il; i ++ ) {\n\n\t\t\tpass = this.passes[ i ];\n\n\t\t\tif ( pass.enabled === false ) continue;\n\n\t\t\tpass.renderToScreen = ( this.renderToScreen && this.isLastEnabledPass( i ) );\n\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive );\n\n\t\t\tif ( pass.needsSwap ) {\n\n\t\t\t\tif ( maskActive ) {\n\n\t\t\t\t\tvar context = this.renderer.getContext();\n\t\t\t\t\tvar stencil = this.renderer.state.buffers.stencil;\n\n\t\t\t\t\t//context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime );\n\n\t\t\t\t\t//context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.EQUAL, 1, 0xffffffff );\n\n\t\t\t\t}\n\n\t\t\t\tthis.swapBuffers();\n\n\t\t\t}\n\n\t\t\tif ( MaskPass !== undefined ) {\n\n\t\t\t\tif ( pass instanceof MaskPass ) {\n\n\t\t\t\t\tmaskActive = true;\n\n\t\t\t\t} else if ( pass instanceof ClearMaskPass ) {\n\n\t\t\t\t\tmaskActive = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.renderer.setRenderTarget( currentRenderTarget );\n\n\t},\n\n\treset: function ( renderTarget ) {\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tvar size = this.renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = this.renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = this.renderTarget1.clone();\n\t\t\trenderTarget.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t\t}\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t},\n\n\tsetSize: function ( width, height ) {\n\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\tvar effectiveWidth = this._width * this._pixelRatio;\n\t\tvar effectiveHeight = this._height * this._pixelRatio;\n\n\t\tthis.renderTarget1.setSize( effectiveWidth, effectiveHeight );\n\t\tthis.renderTarget2.setSize( effectiveWidth, effectiveHeight );\n\n\t\tfor ( var i = 0; i < this.passes.length; i ++ ) {\n\n\t\t\tthis.passes[ i ].setSize( effectiveWidth, effectiveHeight );\n\n\t\t}\n\n\t},\n\n\tsetPixelRatio: function ( pixelRatio ) {\n\n\t\tthis._pixelRatio = pixelRatio;\n\n\t\tthis.setSize( this._width, this._height );\n\n\t}\n\n} );\n\n\nvar Pass = function () {\n\n\t// if set to true, the pass is processed by the composer\n\tthis.enabled = true;\n\n\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\tthis.needsSwap = true;\n\n\t// if set to true, the pass clears its buffer before rendering\n\tthis.clear = false;\n\n\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\tthis.renderToScreen = false;\n\n};\n\nObject.assign( Pass.prototype, {\n\n\tsetSize: function ( /* width, height */ ) {},\n\n\trender: function ( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n} );\n\n// Helper for passes that need to fill the viewport with a single quad.\nPass.FullScreenQuad = ( function () {\n\n\tvar camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\tvar geometry = new PlaneBufferGeometry( 2, 2 );\n\n\tvar FullScreenQuad = function ( material ) {\n\n\t\tthis._mesh = new Mesh( geometry, material );\n\n\t};\n\n\tObject.defineProperty( FullScreenQuad.prototype, 'material', {\n\n\t\tget: function () {\n\n\t\t\treturn this._mesh.material;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._mesh.material = value;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( FullScreenQuad.prototype, {\n\n\t\tdispose: function () {\n\n\t\t\tthis._mesh.geometry.dispose();\n\n\t\t},\n\n\t\trender: function ( renderer ) {\n\n\t\t\trenderer.render( this._mesh, camera );\n\n\t\t}\n\n\t} );\n\n\treturn FullScreenQuad;\n\n} )();\n\nexport { EffectComposer, Pass };\n"],"names":["ShaderPass","shader","textureID","Pass","call","this","undefined","ShaderMaterial","uniforms","material","UniformsUtils","clone","defines","Object","assign","vertexShader","fragmentShader","fsQuad","FullScreenQuad","prototype","create","constructor","render","renderer","writeBuffer","readBuffer","value","texture","renderToScreen","setRenderTarget","clear","autoClearColor","autoClearDepth","autoClearStencil","MaskPass","scene","camera","needsSwap","inverse","writeValue","clearValue","context","getContext","state","buffers","color","setMask","depth","setLocked","stencil","setTest","setOp","REPLACE","setFunc","ALWAYS","setClear","EQUAL","KEEP","ClearMaskPass","EffectComposer","renderTarget","parameters","minFilter","LinearFilter","magFilter","format","RGBAFormat","stencilBuffer","size","getSize","Vector2","_pixelRatio","getPixelRatio","_width","width","_height","height","WebGLRenderTarget","name","renderTarget1","renderTarget2","passes","CopyShader","console","error","copyPass","clock","Clock","swapBuffers","tmp","addPass","pass","push","setSize","insertPass","index","splice","isLastEnabledPass","passIndex","i","length","enabled","deltaTime","getDelta","currentRenderTarget","getRenderTarget","maskActive","il","NOTEQUAL","reset","dispose","effectiveWidth","effectiveHeight","setPixelRatio","pixelRatio","geometry","OrthographicCamera","PlaneBufferGeometry","_mesh","Mesh","defineProperty","get","set"],"mappings":"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"}